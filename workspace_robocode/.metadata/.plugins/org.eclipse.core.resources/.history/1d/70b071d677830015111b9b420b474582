package Joebot;
import NeuralNet.CommonInterface;
import robocode.*;
import robocode.util.Utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Random;

import Joebot.LookupTable;

@SuppressWarnings("UnusedDeclaration")

public class Joebot extends AdvancedRobot {


	public enum Action {
	    SHOOT_AT_ENEMY,
	    EXPLORE_RIGHT,
	    EXPLORE_LEFT,
	    EXPLORE_FORWARD,
	    EXPLORE_BACKWARD;
	
	    public void performAction(Joebot robot) {
	
	        switch (this) {
	
	            case EXPLORE_LEFT:
	                robot.turnLeft(45);
	                break;
	
	            case EXPLORE_RIGHT:
	                robot.turnRight(45);
	                break;
	
	
	            case EXPLORE_FORWARD:
	                robot.ahead(100);
	                break;
	
	            case EXPLORE_BACKWARD:
	                robot.back(100);
	                break;
	
	            // Shoot at the enemy based on the most recent position current position
	            case SHOOT_AT_ENEMY:
	                double enemy = robot.heading - robot.gunHeading + robot.enemyBearing;
	                double absEnemy = Math.abs(enemy);
	
	                if (enemy > 0) {
	                    robot.turnGunRight(absEnemy);
	                } else {
	                    // make sure it's not actually zero
	                    if (enemy + 360 > 0) {
	                        robot.turnGunLeft(absEnemy);
	                    }
	                }
	
	                if (robot.getGunHeat() != 0) return;
	
	                // fire adjusted for distance
	                robot.fire(Math.min(400 / robot.enemyDistance, 3));
	
	                robot.waitForBullet = true;
	
	                break;
	
	        }
	
	    }
	}
    private static LookupTable lut;

    private static ArrayList<Double> score;

    private int stateVariables = 7;

    /**
     * Energy - Quantized to 0-2, low, medium, high
     */
    public double energy;

    /**
     * Position x - quantized to 0 - 8
     */
    public double x;

    /**
     * Position x - quantized to 0 - 6
     */
    public double y;

    /**
     * Gun Heat, Quantized to 0-2, low, medium, high can only fire when 0
     */
    public double gunHeat;


    /**
     * Velocity - 0 - 8 pixels / second, not sure it's especially useful as it seems to clamp at 1
     */
    public double velocity;

    /**
     * Heading - in degrees, quantized from in 10 degree increments
     */
    public double heading;


    /**
     * gun heading- in degrees, quantized from in 10 degree increments
     */
    public double gunHeading;

    /**
     * radar heading- in degrees, quantized from in 10 degree increments
     * <p/>
     * IGNORED
     */
    public double radarHeading;


    // enemy state variables

    /**
     * Enemy Bearing - in degrees, quanitized in 10 deg increments
     * <p/>
     * (sort of think this might make more sense as facing me or not facing me)
     */
    public double enemyBearing;

    /**
     * Enemy Distance - quantized to near, medium, far
     */
    public double enemyDistance;

    /**
     * Enemy Energy - quantized to 0 - 2, high medium low
     */
    public double enemyEnergy;

    /**
     * Enemy Velocity - 0 - 8 pixels per second (ignoring)
     */
    private double enemyVelocity;

    private double lastReward;

    private double[] lastStateAction;

    private double epsilon = 0.8; //exploration rate

    private double gamma = 0.9; //discount rate

    private double alpha = 0.1; 

    public boolean trackedEnemy;
    public boolean waitForBullet;

    private static PrintStream fileOut;

    public Joebot() {
        super();

        // FLOOR
        int[] floor = {
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0

        };

        int[] ceil = {
                2,
                8,
                6,
                1,
                6,
                6,
                2,
                Action.values().length + 1
        };

        if (lut == null) {
            lut = new LookupTable(this.stateVariables + 1, floor, ceil);

//            try {
//                lut.load("lut.robot");
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
        }

    }


    private void executePolicy() {
        double[][] sas = this.generateStateActionPairs();
        double[] greedy = maxQOf(sas);

        // exploration
        Action a;
        if (new Random().nextDouble() < epsilon) {
            double[] sa = sas[new Random().nextInt(sas.length)];
            lastStateAction = sa;

            performAction(sa);
        }

        // greedy
        else {
            performAction(greedy);
            lastStateAction = greedy;
        }
    }

    @Override
    public void run() {
        // find our enemy
        turnRadarRightRadians(Double.POSITIVE_INFINITY);

        // Make the radar independent of our motion
        setAdjustRadarForGunTurn(true);
        setAdjustRadarForRobotTurn(true);

        do {
            executePolicy();
            execute();
            scan();
        }
        while (true);
    }

    private void performAction(double[] sa) {
        Action action = Action.values()[(int) sa[sa.length - 1]];
        action.performAction(this);
    }

    /**
     * *********************************************************************
     * Events
     */

    // update the state
    @Override
    public void onStatus(StatusEvent e) {
        this.energy = getEnergy();

        this.gunHeat = getGunHeat();

        this.x = getX();

        this.y = getX();

        this.velocity = getVelocity();

        this.heading = getHeading();

        this.gunHeading = getGunHeading();

        this.radarHeading = getRadarHeading();

        // entered new state so it's time for q value update


        double[][] sas = this.generateStateActionPairs();
        double[] greedy = maxQOf(sas);

        for (int i = 0; i < sas.length; i++) {
            double[] sa = sas[i];
        }


        if (lastStateAction != null) {
//            log("Found Reward " + lastReward + "- Updating Q value");

            double old_q = lut.outputFor(lastStateAction);

            double new_q = old_q + alpha * (lastReward + gamma * lut.outputFor(greedy) - old_q);

            lut.train(lastStateAction, new_q);

            lastReward = 0;
        }
    }


    //              This method is called when your robot sees another robot, i.e. when the robot's radar scan "hits" another robot.
    @Override
    public void onScannedRobot(ScannedRobotEvent e) {
        trackedEnemy = true;

        this.enemyBearing = e.getBearing();

        this.enemyDistance = e.getDistance();

        this.enemyEnergy = e.getEnergy();

        this.enemyVelocity = e.getVelocity();


        // Lock the radar on - found at http://robowiki.net/wiki/One_on_One_Radar
        double radarTurn =
                // Absolute bearing to target
                getHeadingRadians() + e.getBearingRadians()
                        // Subtract current radar heading to get turn required
                        - getRadarHeadingRadians();


        setTurnRadarRightRadians(Utils.normalRelativeAngle(radarTurn));
    }

    //    This method is called when one of your bullets hits another robot.
    @Override
    public void onBulletHit(BulletHitEvent event) {

        // generate reward

        lastReward = 3;

        waitForBullet = false;
    }

    //    This method is called when one of your bullets hits another bullet.
    @Override
    public void onBulletHitBullet(BulletHitBulletEvent event) {
        // generate reward
        lastReward = 1;

        waitForBullet = false;
    }


    @Override
    public void onBulletMissed(BulletMissedEvent event) {
        lastReward = -1;

        waitForBullet = false;
    }

    //    This method is called if your robot dies.
    @Override
    public void onDeath(DeathEvent event) {
        // generate -reward
        lastReward = -1;
    }

    //    This method is called when your robot is hit by a bullet.
    @Override
    public void onHitByBullet(HitByBulletEvent event) {
        // generate -reward
        lastReward = -2;
    }

    //    This method is called when your robot collides with another robot.
    @Override
    public void onHitRobot(HitRobotEvent event) {
        log("Robot on hit robot: Reward!");
        // generate reward
        lastReward = -1;
    }

    //    This method is called when your robot collides with a wall.
    @Override
    public void onHitWall(HitWallEvent event) {
        log("Robot Hit Wall: -Reward!");
        // generate -reward
        lastReward = -1;
    }

    //              This method is called when another robot dies.
    @Override
    public void onRobotDeath(RobotDeathEvent event) {
        log("Robot Death: Reward!");
        // generate +reward
        lastReward = 2;
    }

    // This method is called after the end of a round.
    @Override
    public void onRoundEnded(RoundEndedEvent event) {
        logToFile(event.getRound() + "," + lut.explored());
        event.getRound();
        event.getTime();
    }

    @Override
    public void onBattleEnded(BattleEndedEvent event) {
        log("End");
        System.out.println("Battle over lets save this bitch.");
        File file = new File("lut.robot");
        logToFile("LUT Size: " + lut.size());
        try {
            fileOut.close();
            lut.save(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private double[][] generateStateActionPairs() {
        double[][] sas = new double[Action.values().length][stateVariables + 1];

        // conviniently the ordinals map to the indexes so this is pretty easy
        for (Action action : Action.values()) {
            double[] sa = populateState(sas[action.ordinal()]);
            sa[sa.length - 1] = action.ordinal();
        }

        return sas;
    }

    /**
     * Populates the state variables
     *
     * @param sa
     */
    private double[] populateState(double[] sa) {

        // JOEBOT STATS

        // energy
        sa[0] = processEnergy(energy);

        // x
        sa[1] = Math.round(x / 100);

        // y
        sa[2] = Math.round(y / 100);

        // gun heat
        sa[3] = gunHeat == 0 ? 0 : 1;

        // heading
        sa[4] = processBearing(heading);

        // ENEMY STATS

        // heading
        sa[6] = processBearing(enemyBearing);

        // distance
        sa[7] = enemyDistance > 666 ? 2 : (enemyDistance < 333 ? 0 : 1);

        // energy
//        sa[8] = processEnergy(enemyEnergy);

        return sa;
    }

    /**
     * Tokenizes bearing into states 7
     * 0 - N
     * 1 - NE
     * 2 - E
     * 3 - SE
     * 4 - S
     * 5 - SW
     * 6 - W
     * 6 - NW
     *
     * @param bearing
     * @return
     */
    private double processBearing(double bearing) {
        double retval = 0;

        // NORTH
        if (bearing > 337.5 && bearing <= 380 || bearing >= 0 && bearing <= 22.5) {
            retval = 0;
        }

        // NORTH EAST
        else if (bearing >= 22.5 && bearing < 67.5) {
            retval = 1;

        }

        // EAST
        else if (bearing >= 67.5 && bearing < 112.5) {
            retval = 2;
        }

        // SE
        else if (bearing >= 112.5 && bearing < 157.5) {
            retval = 3;
        }

        // S
        else if (bearing >= 157.5 && bearing < 202.5) {
            retval = 4;
        }

        // SW
        else if (bearing >= 202.5 && bearing < 247.5) {
            retval = 5;
        }

        // W
        else if (bearing >= 247.5 && bearing < 292.5) {
            retval = 6;
        }

        // NW
        else {
            retval = 7;
        }


        return retval;
    }

    /**
     * Tokenizes energy into three states
     *
     * @param energy
     * @return
     */
    private double processEnergy(double energy) {
        double retval = 0;

        if (energy >= 66) {
            retval = 2;
        } else if (energy >= 33) {
            retval = 1;
        }

        return retval;
    }

    /**
     * Returns the s, a pair with the highest q value, assuming that the last entry is the q value.
     *
     * @param sas
     * @return
     */
    private double[] maxQOf(double[][] sas) {

        double max = -Double.MAX_VALUE;
        double[] retval = null;

        for (int i = 0; i < sas.length; i++) {
            double[] sample = sas[i];
//            log("Action: " + sample[sample.length - 1]);
            double q = lut.outputFor(sample);
//            log("q: " + q);

            if (max < q) {
                retval = sample;
                max = q;
            }
        }

        return retval;
    }

    public void log(String string) {
//        System.out.println(string);
    }

    public void logToFile(String string) {
        try {
            if (fileOut == null) {
                fileOut = new PrintStream("robot.out");
            }
            fileOut.println(string);
        } catch (FileNotFoundException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }

}
