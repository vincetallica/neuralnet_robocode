import java.*;
import java.util.Random;

public class XOR_BP
{
    private static final int NUM_INPUTS = 3;      // Input nodes, plus the bias input.
    private static final int NUM_PATTERNS = 4;    // Input patterns for XOR experiment.

    private static final int NUM_HIDDEN = 4;
    private static final int NUM_EPOCHS = 200;
    private static final double LR_IH = 0.7;      // Learning rate, input to hidden weights.
    private static final double LR_HO = 0.07;     // Learning rate, hidden to output weights.

    private static double hiddenVal[] = new double[NUM_HIDDEN];    // Hidden node outputs.

    private static double weightsIH[][] =  new double[NUM_INPUTS][NUM_HIDDEN]; // Input to Hidden weights.
    private static double weightsHO[] = new double[NUM_HIDDEN];    // Hidden to Output weights.

    private static int trainInputs[][] = new int[NUM_PATTERNS][NUM_INPUTS];
    private static int trainOutput[] = new int[NUM_PATTERNS];      // "Actual" output values.
    
    private static double errThisPat = 0.0;
    private static double outPred = 0.0;     // "Expected" output values.
    private static double RMSerror = 0.0;    // Root Mean Squared error.

    private static void algorithm()
    {
        int patNum = 0;
        
        //Replace NeuralNetwork initialize weights
        initData(); //train data - 
        //initializes correct pattern output (supervised expected output)

        // Train the network.
        for(int j = 0; j < NUM_EPOCHS; j++) //num of iterations
        {
            for(int i = 0; i < NUM_PATTERNS; i++)
            {
                // Select a pattern at random (out of 4 patterns)
                patNum = new Random().nextInt(4);

                // Calculate the output and error for this pattern. //FF
                // outputFor() - replace  

                // Adjust network weights. //BP
                // commoninterface.train (HO, and IH)

            } // i
            RMSerror = calcOverallError();

            // Display the overall network error after each epoch
            System.out.println("epoch = " + j + " RMS Error = " + RMSerror);

        } // j

        displayResults();
        
        return;
    }

    private static void initWeights()
    {
        //  Initialize weights to random values.
        for(int j = 0; j < NUM_HIDDEN; j++)
        {
            weightsHO[j] = (new Random().nextDouble() - 0.5) / 2.0;
            for(int i = 0; i < NUM_INPUTS; i++)
            {
                weightsIH[i][j] = (new Random().nextDouble() - 0.5) / 5.0;
                System.out.println("Weight = " + weightsIH[i][j]);
            } // i
        } // j
        
        return;
    }

    private static void initData()
    {
        // The data here is the XOR data which has been rescaled to the range -1 to 1.
        // An extra input value of 1 is also added to act as the bias.
        // The output must lie in the range -1 to 1.

        trainInputs[0][0] = 1;
        trainInputs[0][1] = -1;
        trainInputs[0][2] = 1;    // Bias
        trainOutput[0] = 1;

        trainInputs[1][0] = -1;
        trainInputs[1][1] = 1;
        trainInputs[1][2] = 1;    // Bias
        trainOutput[1] = 1;

        trainInputs[2][0] = 1;
        trainInputs[2][1] = 1;
        trainInputs[2][2] = 1;    // Bias
        trainOutput[2] = -1;

        trainInputs[3][0] = -1;
        trainInputs[3][1] = -1;
        trainInputs[3][2] = 1;    // Bias
        trainOutput[3] = -1;
        
        return;
    }

    private static void displayResults()
    {
        for(int i = 0; i < NUM_PATTERNS; i ++)
        {

            System.out.println("pat = " + (i + 1) + " actual = " + trainOutput[i] + " neural model = " + outPred);
        }
        return;
    }

    public static void main(String[] args)
    {
        algorithm();
        return;
    }

}