import java.*;
import java.util.Random;
import NeuralNet.NeuralNet;


public class XOR_BP
{
    private static void algorithm()
    {
        int patNum = 0;
        
        //Replace NeuralNetwork initialize weights
        initData(); //train data - 
        //initializes correct pattern output (supervised expected output)

        // Train the network.
        for(int j = 0; j < NUM_EPOCHS; j++) //num of iterations
        {
            for(int i = 0; i < NUM_PATTERNS; i++)
            {
                // Select a pattern at random (out of 4 patterns)
                patNum = new Random().nextInt(4);

                // Calculate the output and error for this pattern. //FF
                // outputFor() - replace  

                // Adjust network weights. //BP
                // commoninterface.train (HO, and IH)

            } // i
            RMSerror = calcOverallError();

            // Display the overall network error after each epoch
            System.out.println("epoch = " + j + " RMS Error = " + RMSerror);

        } // j

        displayResults();
        
        return;
    }

    public static void main(String[] args)
    {
        algorithm();
        return;
    }

}